# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.path.prefix: '%env(APP_PATH_PREFIX)%'
    env(CLOUDINARY_CONFIG_FILE): '%kernel.project_dir%/config/cloudinary.yml'

services:

    #### Symfony ####

    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

        bind:
            # Bound env variables
            $bindEnableNoHits: '%env(bool:APP_ENABLE_NO_HITS)%'
            $bindApiMaxIdentifiers: '%env(int:APP_API_MAX_IDENTIFIERS)%'
            $bindElasticIndex: '%env(resolve:ELASTIC_INDEX)%'
            $bindElasticType: '%env(ELASTIC_TYPE)%'
            $bindElasticMinImageSize: '%env(int:ELASTIC_MIN_IMAGE_SIZE)%'
            $bindCloudinaryTransformations: '%env(yml:file:resolve:CLOUDINARY_CONFIG_FILE)%'
            $bindTraceId: '%env(traceId:HTTP_X_REQUEST_ID)%'

            # Bound services
            Elasticsearch\Client: '@api_platform.elasticsearch.client'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']


    #### App ####
    monolog.formatter.json:
        class: Monolog\Formatter\JsonFormatter

    App\Logger\TraceIdProcessor:
        tags:
            - { name: monolog.processor }

    # Manually wire the MetricsService:
    # APC storage requires APCU which is not available when testing through behat
    # using the Symfony KernelDriver. So we need to be able manually configure
    # the right adapter for testing
    App\Service\MetricsService:
        autowire: false
        arguments:
            $adapter: '@app.metrics_service.adapter'

    app.metrics_service.adapter:
        autowire: false
        class: Prometheus\Storage\APC

    # OpenApi/Swagger decoration
    App\Api\OpenApi\OpenApiDecorator:
        decorates: 'api_platform.swagger.normalizer.api_gateway'
        arguments:
            $decorated: '@App\Api\OpenApi\OpenApiDecorator.inner'
        autoconfigure: false

    # Fixtures Service
    # Used in 'dev' and 'test' env only
    App\Command\FixturesLoadCommand:
        lazy: true
    App\DataFixtures\AppFixtures:
        lazy: true
    App\DataFixtures\AppFixtures\Elastic\ElasticService:
        lazy: true

