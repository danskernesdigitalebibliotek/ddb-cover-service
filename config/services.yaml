# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.enable.no.hits: '%env(bool:APP_ENABLE_NO_HITS)%'
    app.path.prefix: '%env(APP_PATH_PREFIX)%'
    elastic.index: '%env(resolve:ELASTIC_INDEX)%'
    elastic.type: '%env(ELASTIC_TYPE)%'
    elastic.min.image.size: '%env(int:ELASTIC_MIN_IMAGE_SIZE)%'
    env(CLOUDINARY_CONFIG_FILE): '%kernel.project_dir%/config/cloudinary.yml'
    cloudinary.transformations: '%env(yml:file:resolve:CLOUDINARY_CONFIG_FILE)%'
    openPlatform.id: '%env(OPENPLATFORM_ID)%'
    openPlatform.secret: '%env(OPENPLATFORM_SECRET)%'
    openPlatform.introspection.url: '%env(OPENPLATFORM_INTTOSPRECTION_URL)%'

services:

    #### Symfony ####

    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Model,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']


    #### App ####

    # Manually wire the MetricsService:
    # APC storage requires APCU is not available when testing through behat
    # using the Symfony KernelDriver so we need to be able manually configure
    # the right adapter for testing
    App\Service\MetricsService:
        autowire: false
        arguments:
            $adapter: '@app.metrics_service.adapter'

    app.metrics_service.adapter:
        autowire: false
        class: Prometheus\Storage\APC

    # SearchService
    App\Api\Elastic\SearchService:
        arguments:
            $client: '@api_platform.elasticsearch.client'
            $index : '%elastic.index%'
            $type : '%elastic.type%'
            $minImageSize : '%elastic.min.image.size%'
            $metricsService : '@App\Service\MetricsService'

    App\Api\Elastic\SearchServiceInterface: '@App\Api\Elastic\SearchService'

    # NoHitsService
    App\Service\NoHitService:
        arguments:
            $noHitsProcessingEnabled: '%app.enable.no.hits%'

    # Cloudinary
    App\Service\CoverStore\CloudinaryTransformationService:
        arguments:
            $cloudinaryTransformations: '%cloudinary.transformations%'

    # OpenApi/Swagger
    App\Api\OpenApi\OpenApiDecorator:
        decorates: 'api_platform.swagger.normalizer.api_gateway'
        arguments: [ '@App\Api\OpenApi\OpenApiDecorator.inner' ]
        autoconfigure: false

    # Statistics logger
    App\Service\StatsLoggingService:
        arguments:
            $statsLogger: '@monolog.logger.statistics'

    # Fixtures Service
    App\Command\FixturesLoadCommand:
        lazy: true
    App\DataFixtures\AppFixtures:
        lazy: true
    App\DataFixtures\AppFixtures\Elastic\ElasticService:
        lazy: true

    # Open Platform TokenAuthenticator
    App\Security\TokenAuthenticator:
        arguments:
            $openPlatformId: '%env(OPEN_PLATFORM_ID)%'
            $openPlatformSecret: '%env(OPEN_PLATFORM_SECRET)%'
            $openPlatformUrl: '%env(OPEN_PLATFORM_INTROSPECTION_URL)%'
